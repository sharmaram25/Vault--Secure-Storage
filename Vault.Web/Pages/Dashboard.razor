@page "/"
@attribute [Authorize]
@inject SecretService SecretService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Vault - Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Dashboard Header -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4 gap-3">
                <div>
                    <h2 class="text-white mb-1 h3 h-md-2">
                        <i class="bi bi-shield-lock-fill text-primary me-2"></i>
                        Your Vault
                    </h2>
                    <p class="text-muted mb-0 small">Secure storage for your private information</p>
                </div>
                <button class="btn btn-gradient btn-lg shadow align-self-stretch align-self-md-auto" @onclick="@(() => Navigation.NavigateTo("/secret/new"))">
                    <i class="bi bi-plus-circle me-2"></i> 
                    <span class="d-none d-sm-inline">Add Secret</span>
                    <span class="d-sm-none">Add</span>
                </button>
            </div>

            @if (isLoading)
            {
                <div class="d-flex justify-content-center py-5">
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (secrets?.Any() == true)
            {
                <!-- Secrets Grid -->
                <div class="row g-3 g-md-4">
                    @foreach (var secret in secrets)
                    {
                        <div class="col-12 col-sm-6 col-lg-4 col-xl-3">
                            <div class="secret-card card h-100 border-0 shadow-lg">
                                <div class="card-header bg-gradient text-white border-0" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-key-fill me-2"></i>
                                        <h6 class="card-title mb-0 text-white fw-bold text-truncate" title="@secret.Title">
                                            @secret.Title
                                        </h6>
                                    </div>
                                </div>
                                <div class="card-body bg-dark text-light p-3">
                                    <div class="mb-3">
                                        <small class="text-muted d-block">
                                            <i class="bi bi-calendar3 me-1"></i>
                                            Created: @secret.CreatedAt.ToString("MMM dd, yyyy")
                                        </small>
                                        @if (secret.UpdatedAt.HasValue)
                                        {
                                            <small class="text-muted d-block">
                                                <i class="bi bi-pencil me-1"></i>
                                                Updated: @secret.UpdatedAt.Value.ToString("MMM dd, yyyy")
                                            </small>
                                        }
                                    </div>
                                    <div class="secret-preview bg-secondary bg-opacity-25 rounded p-2 mb-3">
                                        <small class="text-muted">
                                            <i class="bi bi-lock-fill me-1"></i>
                                            Encrypted content stored securely
                                        </small>
                                    </div>
                                </div>
                                <div class="card-footer bg-dark border-0 p-2">
                                    <div class="btn-group w-100" role="group">
                                        <button class="btn btn-outline-primary btn-sm flex-fill py-1" @onclick="@(() => ViewSecret(secret.Id))">
                                            <i class="bi bi-eye d-none d-md-inline"></i>
                                            <span class="d-md-none">üëÅÔ∏è</span>
                                            <span class="d-none d-lg-inline ms-1">View</span>
                                        </button>
                                        <button class="btn btn-outline-warning btn-sm flex-fill py-1" @onclick="@(() => EditSecret(secret.Id))">
                                            <i class="bi bi-pencil d-none d-md-inline"></i>
                                            <span class="d-md-none">‚úèÔ∏è</span>
                                            <span class="d-none d-lg-inline ms-1">Edit</span>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm flex-fill py-1" @onclick="@(() => DeleteSecret(secret.Id))">
                                            <i class="bi bi-trash d-none d-md-inline"></i>
                                            <span class="d-md-none">üóëÔ∏è</span>
                                            <span class="d-none d-lg-inline ms-1">Delete</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="text-center py-5">
                    <div class="empty-state">
                        <div class="mb-4">
                            <i class="bi bi-safe2 text-primary" style="font-size: 5rem; opacity: 0.7;"></i>
                        </div>
                        <h3 class="text-white mb-3">Your vault is empty</h3>
                        <p class="text-muted mb-4 lead">Start securing your important information by adding your first secret.</p>
                        <button class="btn btn-gradient btn-lg shadow" @onclick="@(() => Navigation.NavigateTo("/secret/new"))">
                            <i class="bi bi-plus-circle me-2"></i> Add Your First Secret
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>



@code {
    private IEnumerable<SecretListDto>? secrets;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSecrets();
    }

    private async Task LoadSecrets()
    {
        isLoading = true;
        secrets = await SecretService.GetSecretsAsync();
        isLoading = false;
        StateHasChanged();
    }

    private void ViewSecret(int secretId)
    {
        Navigation.NavigateTo($"/secret/{secretId}");
    }

    private void EditSecret(int secretId)
    {
        Navigation.NavigateTo($"/secret/{secretId}/edit");
    }

    private async Task DeleteSecret(int secretId)
    {
        var secret = secrets?.FirstOrDefault(s => s.Id == secretId);
        if (secret == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{secret.Title}'?");
        if (confirmed)
        {
            var success = await SecretService.DeleteSecretAsync(secretId);
            if (success)
            {
                await LoadSecrets();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to delete secret. Please try again.");
            }
        }
    }
}
