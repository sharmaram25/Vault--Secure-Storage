@page "/login"
@attribute [AllowAnonymous]
@inject VaultAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Vault - Login</PageTitle>

<div class="auth-container vh-100 d-flex align-items-center justify-content-center">
    <div class="auth-overlay"></div>
    <div class="container-fluid">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-5 col-xl-4">
                <div class="auth-card card border-0 shadow-2xl">
                    <div class="card-header bg-gradient text-white text-center border-0" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <div class="py-3">
                            <h1 class="text-white mb-2">üîê Vault</h1>
                            <p class="text-white-50 mb-0">Secure Notes & Password Manager</p>
                        </div>
                    </div>
                    <div class="card-body p-5 bg-dark text-light">
                        <div class="text-center mb-4">
                            <h4 class="text-white mb-2">Welcome Back</h4>
                            <p class="text-light">Sign in to access your secure vault</p>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger border-0" role="alert">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }

                        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="needs-validation" novalidate>
                            <DataAnnotationsValidator />
                            
                            <div class="mb-4">
                                <label for="username" class="form-label text-light">
                                    <i class="bi bi-envelope me-2"></i>Email
                                </label>
                                <InputText @bind-Value="loginModel.Username" class="form-control form-control-lg bg-secondary border-0 text-light" id="username" placeholder="Enter your email" />
                                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger small" />
                            </div>

                            <div class="mb-4">
                                <label for="password" class="form-label text-light">
                                    <i class="bi bi-lock me-2"></i>Password
                                </label>
                                <InputText type="password" @bind-Value="loginModel.Password" class="form-control form-control-lg bg-secondary border-0 text-light" id="password" placeholder="Enter your password" />
                                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
                            </div>

                            <div class="d-grid mb-4">
                                <button type="submit" class="btn btn-gradient btn-lg shadow" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Signing in...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-box-arrow-in-right me-2"></i>
                                        <span>Sign In</span>
                                    }
                                </button>
                            </div>
                        </EditForm>

                        <div class="text-center">
                            <p class="text-light mb-0">
                                Don't have an account? 
                                <a href="/register" class="text-primary text-decoration-none fw-bold">Sign up here</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .auth-container {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        position: relative;
        overflow: hidden;
    }
    
    .auth-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        opacity: 0.3;
    }
    
    .auth-card {
        position: relative;
        z-index: 10;
        border-radius: 20px !important;
        overflow: hidden;
        backdrop-filter: blur(10px);
    }
    
    .shadow-2xl {
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5) !important;
    }
    
    .btn-gradient {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        color: white;
        transition: all 0.3s ease;
    }
    
    .btn-gradient:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        color: white;
    }
    
    .form-control:focus {
        background-color: #495057 !important;
        border-color: #667eea !important;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25) !important;
        color: white !important;
    }
    
    .form-control::placeholder {
        color: #adb5bd !important;
    }
</style>

@code {
    private UserLoginDto loginModel = new();
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var success = await AuthService.LoginAsync(loginModel);
            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your email and password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
