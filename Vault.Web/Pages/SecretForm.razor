@page "/secret/new"
@page "/secret/{Id:int}/edit"
@attribute [Authorize]
@inject SecretService SecretService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>@(IsEdit ? "Edit Secret" : "Add Secret") - Vault</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card bg-secondary border-0 shadow-lg">
                <div class="card-header bg-gradient text-white text-center py-3" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                    <h4 class="mb-0">@(IsEdit ? "Edit Secret" : "Add New Secret")</h4>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@secretModel" OnValidSubmit="@HandleSave" class="needs-validation" novalidate>
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="title" class="form-label text-light fw-bold">Title</label>
                            <InputText @bind-Value="secretModel.Title" class="form-control bg-dark text-white border-secondary" id="title" placeholder="Enter a title for your secret" />
                            <ValidationMessage For="@(() => secretModel.Title)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="content" class="form-label text-light fw-bold">Content</label>
                            <InputTextArea @bind-Value="secretModel.Content" class="form-control bg-dark text-white border-secondary" id="content" rows="8" placeholder="Enter your secret content here..." />
                            <ValidationMessage For="@(() => secretModel.Content)" class="text-danger" />
                            <div class="form-text text-light">
                                Your content will be encrypted before being stored.
                            </div>
                        </div>

                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-gradient" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>@(IsEdit ? "Updating..." : "Saving...")</span>
                                }
                                else
                                {
                                    <i class="bi bi-save me-2"></i>
                                    <span>@(IsEdit ? "Update Secret" : "Save Secret")</span>
                                }
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo("/"))">
                                <i class="bi bi-arrow-left me-2"></i> Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private SecretFormModel secretModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool IsEdit => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit && Id.HasValue)
        {
            var secret = await SecretService.GetSecretAsync(Id.Value);
            if (secret != null)
            {
                secretModel.Title = secret.Title;
                secretModel.Content = secret.Content;
            }
            else
            {
                Navigation.NavigateTo("/");
            }
        }
    }

    private async Task HandleSave()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            bool success;
            if (IsEdit && Id.HasValue)
            {
                var updateDto = new UpdateSecretDto
                {
                    Title = secretModel.Title,
                    Content = secretModel.Content
                };
                var result = await SecretService.UpdateSecretAsync(Id.Value, updateDto);
                success = result != null;
            }
            else
            {
                var createDto = new CreateSecretDto
                {
                    Title = secretModel.Title,
                    Content = secretModel.Content
                };
                var result = await SecretService.CreateSecretAsync(createDto);
                success = result != null;
            }

            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = $"Failed to {(IsEdit ? "update" : "save")} secret. Please try again.";
            }
        }
        catch
        {
            errorMessage = $"An error occurred while {(IsEdit ? "updating" : "saving")} the secret.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class SecretFormModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(255, ErrorMessage = "Title cannot be longer than 255 characters")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Content is required")]
        public string Content { get; set; } = string.Empty;
    }
}
